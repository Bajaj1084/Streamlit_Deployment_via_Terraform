name: Deploy to Dev
on:
  push:
    branches:
      - dev
      

env:
  PYTHON_VERSION: '3.8'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}


    - name: 'Install snowcli and pytest environment'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install snowflake-cli-labs

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: 'Create config'
      shell: bash
      env:
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWCLI_PW }}
          
      
      run: |
        # mkdir -p ~/.snowflake
        # cp config.toml ~/.snowflake/config.toml
        # echo "password = \"$SNOWFLAKE_PASSWORD\"" >> ~/.snowflake/config.toml
        # chmod 0600 ~/.snowflake/config.toml

        mkdir -p ~/.snowflake
        cp ./dev/config.toml ~/.snowflake/config.toml
        echo "password = \"$SNOWFLAKE_PASSWORD\"" >> ~/.snowflake/config.toml
        chmod 0600 ~/.snowflake/config.toml

    # - name: Test Snowflake Connection
    #   shell: bash
    #   run: |
    #     snowflake-cli "SELECT CURRENT_USER();"
    #   continue-on-error: false

    # - name: Terraform Format
    #   id: fmt
    #   run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan
      
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve
      

    - name: 'Deploy the Streamlit app'
      working-directory: ./dev
      shell: bash
      run: |
        snow streamlit deploy --replace
